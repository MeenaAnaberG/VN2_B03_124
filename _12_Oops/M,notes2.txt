ENCAPSULATION:
	Encapsulation in Python describes the concept of bundling data and methods within a single unit. 
So, for example, when you create a class, it means you are implementing encapsulation.


class Employee:
    # constructor
    def __init__(self, name, salary, project):
        # data members
        self.name = name
        self.salary = salary
        self.project = project

    # method
    # to display employee's details
    def show(self):
        # accessing public data member
        print("Name: ", self.name, 'Salary:', self.salary)

    # method
    def work(self):
        print(self.name, 'is working on', self.project)

# creating object of a class
emp = Employee('Jessa', 8000, 'NLP')

# calling public method of the class
emp.show()
emp.work()


ACCESS MODIFIERS:

Public Member: Accessible anywhere from otside oclass.
Private Member: Accessible within the class
Protected Member: Accessible within the class and its sub-classes


GETTER AND SETTERS:
class Student:
    def __init__(self, name, age):
        # private member
        self.name = name
        self.__age = age

    # getter method
    def get_age(self):
        return self.__age

    # setter method
    def set_age(self, age):
        self.__age = age

stud = Student('Jessa', 14)

# retrieving age using getter
print('Name:', stud.name, stud.get_age())

# changing age using setter
stud.set_age(16)

# retrieving age using getter
print('Name:', stud.name, stud.get_age())



Advantages of Encapsulation:

Security: 
	The main advantage of using encapsulation is the security of the data. Encapsulation protects an object from unauthorized access. It allows private and protected access levels to prevent accidental data modification.
Data Hiding:
 	The user would not be knowing what is going on behind the scene. They would only be knowing that to modify a data member, call the setter method. To read a data member, call the getter method. What these setter and getter methods are doing is hidden from them.
Simplicity:
 	It simplifies the maintenance of the application by keeping classes separated and preventing them from tightly coupling with each other.
Aesthetics:
	 Bundling data and methods within a class makes code more readable and maintainable










POLYMORPHISM:

	Polymorphism in Python is the ability of an object to take many forms.
 In simple words, polymorphism allows us to perform the same action in many different ways.


Polymorphism in Built-in function len():

	The built-in function len() calculates the length of an object depending upon its type. If an object is a string, it returns the count of characters, and If an object is a list, it returns the count of items in a list.

The len() method treats an object as per its class type.


students = ['Emma', 'Jessa', 'Kelly']
school = 'ABC School'

# calculate count
print(len(students))
print(len(school))


POLYMORPHISM WITH INHERITANCE:
	Using method overriding polymorphism allows us to defines methods in the child class that have the same name as the methods in the parent class.
 This process of re-implementing the inherited method in the child class is known as Method Overriding.



Python allows different classes to have methods with the same name.

Letâ€™s design a different class in the same way by adding the same methods in two or more classes.
Next, create an object of each class
Next, add all objects in a tuple.
In the end, iterate the tuple using a for loop and call methods of a object without checking its class.



method overloading:

def addition(a, b):
    c = a + b
    print(c)


def addition(a, b, c):
    d = a + b + c
    print(d)


# the below line shows an error
# addition(4, 5)

# This line will call the second product method
addition(3, 7, 5)


Operator Overloading :
	Operator overloading means changing the default behavior of an operator depending on the operands (values) that we use. 
In other words, we can use the same operator for multiple purposes.








